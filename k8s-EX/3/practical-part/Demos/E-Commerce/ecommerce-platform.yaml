# frontend-service.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: frontend-config
data:
  nginx.conf: |
    events {
        worker_connections 1024;
    }
    
    http {
        upstream product_service {
            server product-service:80;
        }
        
        upstream order_service {
            server order-service:80;
        }
        
        upstream user_service {
            server user-service:80;
        }
        
        server {
            listen 80;
            
            location / {
                root /usr/share/nginx/html;
                index index.html;
            }
            
            location /api/products {
                proxy_pass http://product_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
            
            location /api/orders {
                proxy_pass http://order_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
            
            location /api/users {
                proxy_pass http://user_service;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
            }
            
            location /health {
                access_log off;
                return 200 "healthy\n";
                add_header Content-Type text/plain;
            }
        }
    }
    
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>E-Commerce Platform</title>
        <style>
            body {
                font-family: Arial, sans-serif;
                max-width: 1200px;
                margin: 0 auto;
                padding: 20px;
                background-color: #f5f5f5;
            }
            .header {
                background-color: #2c3e50;
                color: white;
                padding: 1rem;
                border-radius: 8px;
                margin-bottom: 2rem;
            }
            .service-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                gap: 1rem;
                margin-bottom: 2rem;
            }
            .service-card {
                background: white;
                padding: 1rem;
                border-radius: 8px;
                box-shadow: 0 2px 4px rgba(0,0,0,0.1);
            }
            .api-test {
                background: white;
                padding: 1rem;
                border-radius: 8px;
                margin-top: 1rem;
            }
            button {
                background-color: #3498db;
                color: white;
                border: none;
                padding: 0.5rem 1rem;
                border-radius: 4px;
                cursor: pointer;
                margin: 0.25rem;
            }
            button:hover {
                background-color: #2980b9;
            }
            .response {
                background-color: #ecf0f1;
                padding: 1rem;
                border-radius: 4px;
                margin-top: 0.5rem;
                font-family: monospace;
                font-size: 12px;
                white-space: pre-wrap;
                max-height: 200px;
                overflow-y: auto;
            }
        </style>
    </head>
    <body>
        <div class="header">
            <h1>üõí Microservices E-Commerce Platform</h1>
            <p>Kubernetes Demo - Multi-Service Architecture</p>
        </div>
        
        <div class="service-grid">
            <div class="service-card">
                <h3>üõçÔ∏è Product Service</h3>
                <p>Manages product catalog, inventory, and pricing</p>
                <button onclick="testAPI('/api/products/health')">Health Check</button>
                <button onclick="testAPI('/api/products')">List Products</button>
            </div>
            
            <div class="service-card">
                <h3>üì¶ Order Service</h3>
                <p>Handles order processing and order history</p>
                <button onclick="testAPI('/api/orders/health')">Health Check</button>
                <button onclick="testAPI('/api/orders')">List Orders</button>
            </div>
            
            <div class="service-card">
                <h3>üë§ User Service</h3>
                <p>Manages user accounts and authentication</p>
                <button onclick="testAPI('/api/users/health')">Health Check</button>
                <button onclick="testAPI('/api/users')">List Users</button>
            </div>
        </div>
        
        <div class="api-test">
            <h3>API Test Console</h3>
            <div id="response" class="response">Click any button above to test the microservices...</div>
        </div>
        
        <script>
            async function testAPI(endpoint) {
                const responseDiv = document.getElementById('response');
                responseDiv.textContent = `Testing ${endpoint}...`;
                
                try {
                    const response = await fetch(endpoint);
                    const data = await response.json();
                    responseDiv.textContent = JSON.stringify(data, null, 2);
                } catch (error) {
                    responseDiv.textContent = `Error: ${error.message}`;
                }
            }
        </script>
    </body>
    </html>
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: frontend-deployment
  labels:
    app: frontend
    tier: web
spec:
  replicas: 2
  selector:
    matchLabels:
      app: frontend
  template:
    metadata:
      labels:
        app: frontend
        tier: web
    spec:
      containers:
      - name: nginx
        image: nginx:1.21-alpine
        ports:
        - containerPort: 80
        resources:
          requests:
            memory: "64Mi"
            cpu: "100m"
          limits:
            memory: "128Mi"
            cpu: "200m"
        volumeMounts:
        - name: frontend-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
        - name: frontend-config
          mountPath: /usr/share/nginx/html/index.html
          subPath: index.html
        livenessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 80
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: frontend-config
        configMap:
          name: frontend-config
---
apiVersion: v1
kind: Service
metadata:
  name: frontend-service
spec:
  selector:
    app: frontend
  ports:
  - port: 80
    targetPort: 80
  type: LoadBalancer

---
# product-service.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: product-service-config
data:
  app.py: |
    from flask import Flask, jsonify, request
    import json
    import uuid
    from datetime import datetime
    import os

    app = Flask(__name__)

    # In-memory product database (in production, use a real database)
    products = {
        "1": {"id": "1", "name": "Laptop", "price": 999.99, "category": "Electronics", "stock": 50},
        "2": {"id": "2", "name": "Phone", "price": 699.99, "category": "Electronics", "stock": 100},
        "3": {"id": "3", "name": "Book", "price": 19.99, "category": "Books", "stock": 200},
        "4": {"id": "4", "name": "Chair", "price": 149.99, "category": "Furniture", "stock": 25},
        "5": {"id": "5", "name": "Desk", "price": 299.99, "category": "Furniture", "stock": 15}
    }

    @app.route('/health')
    def health():
        return jsonify({
            'status': 'healthy',
            'service': 'product-service',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        })

    @app.route('/api/products', methods=['GET'])
    def get_products():
        category = request.args.get('category')
        if category:
            filtered_products = {k: v for k, v in products.items() if v['category'].lower() == category.lower()}
        else:
            filtered_products = products
            
        return jsonify({
            'products': list(filtered_products.values()),
            'total': len(filtered_products),
            'timestamp': datetime.now().isoformat()
        })

    @app.route('/api/products/<product_id>', methods=['GET'])
    def get_product(product_id):
        product = products.get(product_id)
        if product:
            return jsonify(product)
        return jsonify({'error': 'Product not found'}), 404

    @app.route('/api/products/<product_id>/stock', methods=['PUT'])
    def update_stock(product_id):
        product = products.get(product_id)
        if not product:
            return jsonify({'error': 'Product not found'}), 404
            
        data = request.get_json()
        if 'stock' in data:
            products[product_id]['stock'] = data['stock']
            return jsonify(products[product_id])
            
        return jsonify({'error': 'Stock value required'}), 400

    @app.route('/api/products/categories', methods=['GET'])
    def get_categories():
        categories = list(set(product['category'] for product in products.values()))
        return jsonify({
            'categories': categories,
            'timestamp': datetime.now().isoformat()
        })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: product-service-deployment
  labels:
    app: product-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: product-service
  template:
    metadata:
      labels:
        app: product-service
        tier: backend
    spec:
      containers:
      - name: product-service
        # Using your custom Flask image
        image: farajassulai/flask-python-app:production@sha256:c09decceba7dcf6521f453abb685fef457890d3ea3041c798f20001098696a7b
        env:
        - name: SERVICE_NAME
          value: "product-service"
        - name: FLASK_APP
          value: "app.py"
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: service-code
          mountPath: /app/app.py
          subPath: app.py
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: service-code
        configMap:
          name: product-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: product-service
spec:
  selector:
    app: product-service
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP

---
# order-service.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: order-service-config
data:
  app.py: |
    from flask import Flask, jsonify, request
    import json
    import uuid
    from datetime import datetime
    import os

    app = Flask(__name__)

    # In-memory order database
    orders = {}

    def get_product_service_url():
        return os.getenv('PRODUCT_SERVICE_URL', 'http://product-service')

    @app.route('/health')
    def health():
        return jsonify({
            'status': 'healthy',
            'service': 'order-service',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        })

    @app.route('/api/orders', methods=['GET'])
    def get_orders():
        user_id = request.args.get('user_id')
        if user_id:
            user_orders = {k: v for k, v in orders.items() if v['user_id'] == user_id}
        else:
            user_orders = orders
            
        return jsonify({
            'orders': list(user_orders.values()),
            'total': len(user_orders),
            'timestamp': datetime.now().isoformat()
        })

    @app.route('/api/orders', methods=['POST'])
    def create_order():
        data = request.get_json()
        
        if not data or 'user_id' not in data or 'items' not in data:
            return jsonify({'error': 'user_id and items are required'}), 400

        order_id = str(uuid.uuid4())
        total_amount = 0
        
        # Calculate total (in production, verify with product service)
        for item in data['items']:
            total_amount += item.get('price', 0) * item.get('quantity', 1)

        order = {
            'id': order_id,
            'user_id': data['user_id'],
            'items': data['items'],
            'total_amount': total_amount,
            'status': 'pending',
            'created_at': datetime.now().isoformat(),
            'updated_at': datetime.now().isoformat()
        }
        
        orders[order_id] = order
        
        return jsonify(order), 201

    @app.route('/api/orders/<order_id>', methods=['GET'])
    def get_order(order_id):
        order = orders.get(order_id)
        if order:
            return jsonify(order)
        return jsonify({'error': 'Order not found'}), 404

    @app.route('/api/orders/<order_id>/status', methods=['PUT'])
    def update_order_status(order_id):
        order = orders.get(order_id)
        if not order:
            return jsonify({'error': 'Order not found'}), 404
            
        data = request.get_json()
        if 'status' in data:
            orders[order_id]['status'] = data['status']
            orders[order_id]['updated_at'] = datetime.now().isoformat()
            return jsonify(orders[order_id])
            
        return jsonify({'error': 'Status value required'}), 400

    @app.route('/api/orders/stats', methods=['GET'])
    def get_order_stats():
        total_orders = len(orders)
        total_amount = sum(order['total_amount'] for order in orders.values())
        status_counts = {}
        
        for order in orders.values():
            status = order['status']
            status_counts[status] = status_counts.get(status, 0) + 1
            
        return jsonify({
            'total_orders': total_orders,
            'total_amount': total_amount,
            'status_breakdown': status_counts,
            'timestamp': datetime.now().isoformat()
        })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: order-service-deployment
  labels:
    app: order-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: order-service
  template:
    metadata:
      labels:
        app: order-service
        tier: backend
    spec:
      containers:
      - name: order-service
        # Using your custom Flask image
        image: farajassulai/flask-python-app:production@sha256:c09decceba7dcf6521f453abb685fef457890d3ea3041c798f20001098696a7b
        env:
        - name: SERVICE_NAME
          value: "order-service"
        - name: PRODUCT_SERVICE_URL
          value: "http://product-service"
        - name: FLASK_APP
          value: "app.py"
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: service-code
          mountPath: /app/app.py
          subPath: app.py
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: service-code
        configMap:
          name: order-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: order-service
spec:
  selector:
    app: order-service
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP

---
# user-service.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: user-service-config
data:
  app.py: |
    from flask import Flask, jsonify, request
    import json
    import uuid
    from datetime import datetime
    import os

    app = Flask(__name__)

    # In-memory user database
    users = {
        "1": {"id": "1", "username": "alice", "email": "alice@example.com", "created_at": "2023-01-01T00:00:00"},
        "2": {"id": "2", "username": "bob", "email": "bob@example.com", "created_at": "2023-01-15T00:00:00"},
        "3": {"id": "3", "username": "charlie", "email": "charlie@example.com", "created_at": "2023-02-01T00:00:00"}
    }

    @app.route('/health')
    def health():
        return jsonify({
            'status': 'healthy',
            'service': 'user-service',
            'timestamp': datetime.now().isoformat(),
            'version': '1.0.0'
        })

    @app.route('/api/users', methods=['GET'])
    def get_users():
        return jsonify({
            'users': list(users.values()),
            'total': len(users),
            'timestamp': datetime.now().isoformat()
        })

    @app.route('/api/users/<user_id>', methods=['GET'])
    def get_user(user_id):
        user = users.get(user_id)
        if user:
            return jsonify(user)
        return jsonify({'error': 'User not found'}), 404

    @app.route('/api/users', methods=['POST'])
    def create_user():
        data = request.get_json()
        
        if not data or 'username' not in data or 'email' not in data:
            return jsonify({'error': 'username and email are required'}), 400

        # Check if username already exists
        for user in users.values():
            if user['username'] == data['username']:
                return jsonify({'error': 'Username already exists'}), 409

        user_id = str(len(users) + 1)
        user = {
            'id': user_id,
            'username': data['username'],
            'email': data['email'],
            'created_at': datetime.now().isoformat()
        }
        
        users[user_id] = user
        
        return jsonify(user), 201

    @app.route('/api/users/<user_id>', methods=['PUT'])
    def update_user(user_id):
        user = users.get(user_id)
        if not user:
            return jsonify({'error': 'User not found'}), 404
            
        data = request.get_json()
        if 'email' in data:
            users[user_id]['email'] = data['email']
        if 'username' in data:
            users[user_id]['username'] = data['username']
            
        users[user_id]['updated_at'] = datetime.now().isoformat()
        return jsonify(users[user_id])

    @app.route('/api/users/stats', methods=['GET'])
    def get_user_stats():
        total_users = len(users)
        
        return jsonify({
            'total_users': total_users,
            'timestamp': datetime.now().isoformat()
        })

    if __name__ == '__main__':
        app.run(host='0.0.0.0', port=5000, debug=False)
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: user-service-deployment
  labels:
    app: user-service
    tier: backend
spec:
  replicas: 2
  selector:
    matchLabels:
      app: user-service
  template:
    metadata:
      labels:
        app: user-service
        tier: backend
    spec:
      containers:
      - name: user-service
        # Using your custom Flask image
        image: farajassulai/flask-python-app:production@sha256:c09decceba7dcf6521f453abb685fef457890d3ea3041c798f20001098696a7b
        env:
        - name: SERVICE_NAME
          value: "user-service"
        - name: FLASK_APP
          value: "app.py"
        ports:
        - containerPort: 5000
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "256Mi"
            cpu: "200m"
        volumeMounts:
        - name: service-code
          mountPath: /app/app.py
          subPath: app.py
        livenessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 5000
          initialDelaySeconds: 10
          periodSeconds: 5
      volumes:
      - name: service-code
        configMap:
          name: user-service-config
---
apiVersion: v1
kind: Service
metadata:
  name: user-service
spec:
  selector:
    app: user-service
  ports:
  - port: 80
    targetPort: 5000
  type: ClusterIP
