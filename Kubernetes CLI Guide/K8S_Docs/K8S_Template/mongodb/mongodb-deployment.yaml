# ============================================================================
# MongoDB Kubernetes Deployment - Production Ready (Fixed)
# ============================================================================

---
# 1. STORAGECLASS (for local hostPath volumes)
apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: mongodb-local-storage
provisioner: kubernetes.io/no-provisioner
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: false

---
# 2. NAMESPACE
apiVersion: v1
kind: Namespace
metadata:
  name: mgdb-ns
  labels:
    name: mgdb-ns
    environment: production
    team: database-team
    app.kubernetes.io/managed-by: kubectl
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/warn: baseline
  annotations:
    description: "Namespace for mongodb-app application in production environment"
    contact: "database-team@company.com"
    created-by: "k8s-template-v2.0"
spec:
  finalizers: ["kubernetes"]

---
# 3. RESOURCEQUOTA
apiVersion: v1
kind: ResourceQuota
metadata:
  name: mgdb-ns-quota
  namespace: mgdb-ns
  labels:
    component: resource-management
    app.kubernetes.io/part-of: mongodb-app
spec:
  hard:
    requests.cpu: "2000m"
    requests.memory: "4Gi"
    limits.cpu: "4000m"
    limits.memory: "8Gi"
    requests.storage: "100Gi"
    persistentvolumeclaims: "5"
    pods: "10"
    services: "5"
    secrets: "10"
    configmaps: "10"
    count/ingresses.networking.k8s.io: "5"

---
# 4. LIMITRANGE
apiVersion: v1
kind: LimitRange
metadata:
  name: mgdb-ns-limits
  namespace: mgdb-ns
  labels:
    component: resource-management
    app.kubernetes.io/part-of: mongodb-app
spec:
  limits:
  - type: Container
    default:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 1Gi
    defaultRequest:
      cpu: 250m
      memory: 256Mi
      ephemeral-storage: 500Mi
    max:
      cpu: 2000m
      memory: 2Gi
      ephemeral-storage: 5Gi
    min:
      cpu: 50m
      memory: 64Mi
      ephemeral-storage: 100Mi
  - type: PersistentVolumeClaim
    max:
      storage: 50Gi
    min:
      storage: 1Gi

---
# 5. SECRET
apiVersion: v1
kind: Secret
metadata:
  name: mongodb-secret
  namespace: mgdb-ns
  labels:
    app: mongodb
    component: database
type: Opaque
data:
  mongodb-root-username: YWRtaW4=
  mongodb-root-password: U2VjdXJlUEBzc3cwcmQxMjM=

---
# 6. CONFIGMAP
apiVersion: v1
kind: ConfigMap
metadata:
  name: mongodb-config
  namespace: mgdb-ns
  labels:
    app: mongodb
    component: database
data:
  mongodb.conf: |
    storage:
      dbPath: /data/db
      journal:
        enabled: true
      wiredTiger:
        engineConfig:
          cacheSizeGB: 1
    systemLog:
      destination: file
      path: /var/log/mongodb/mongod.log
      logAppend: true
    net:
      port: 27017
      bindIp: 0.0.0.0
    security:
      authorization: enabled
    replication:
      replSetName: "rs0"

---
# 7. PERSISTENTVOLUME (Local Storage - development/testing)
# NOTE: Make sure /mnt/data/mongodb exists on the node before deploying
# Run on each worker node: sudo mkdir -p /mnt/data/mongodb && sudo chmod 777 /mnt/data/mongodb
apiVersion: v1
kind: PersistentVolume
metadata:
  name: mongodb-pv
  labels:
    app: mongodb
spec:
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  storageClassName: mongodb-local-storage
  persistentVolumeReclaimPolicy: Delete
  hostPath:
    path: /mnt/data/mongodb
    type: DirectoryOrCreate
  nodeAffinity:
    required:
      nodeSelectorTerms:
      - matchExpressions:
        - key: kubernetes.io/hostname
          operator: In
          values:
          - k8s-master

---
# 8. PERSISTENTVOLUMECLAIM
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: mongodb-pvc
  namespace: mgdb-ns
  labels:
    app: mongodb
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: mongodb-local-storage

---
# 9. SERVICEACCOUNT
apiVersion: v1
kind: ServiceAccount
metadata:
  name: mongodb-sa
  namespace: mgdb-ns
  labels:
    app: mongodb
automountServiceAccountToken: true

---
# 9. ROLE
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: mongodb-role
  namespace: mgdb-ns
  labels:
    app: mongodb
rules:
- apiGroups: [""]
  resources: ["pods", "pods/log"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["secrets"]
  verbs: ["get"]
- apiGroups: [""]
  resources: ["endpoints"]
  verbs: ["get", "list", "watch"]

---
# 10. ROLEBINDING
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: mongodb-rolebinding
  namespace: mgdb-ns
  labels:
    app: mongodb
subjects:
- kind: ServiceAccount
  name: mongodb-sa
  namespace: mgdb-ns
roleRef:
  kind: Role
  name: mongodb-role
  apiGroup: rbac.authorization.k8s.io

---
# 11. DEPLOYMENT
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
  namespace: mgdb-ns
  labels:
    app: mongodb
    version: "7.0.12"
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
        version: "7.0.12"
    spec:
      serviceAccountName: mongodb-sa
      securityContext:
        fsGroup: 999
        runAsNonRoot: true
        runAsUser: 999
      containers:
      - name: mongodb
        image: mongo:7.0.12
        imagePullPolicy: IfNotPresent
        ports:
        - name: mongodb
          containerPort: 27017
          protocol: TCP
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-username
        - name: MONGO_INITDB_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mongodb-secret
              key: mongodb-root-password
        - name: MONGOD_OPTS
          value: "--bind_ip_all --replSet rs0"
        resources:
          requests:
            cpu: 250m
            memory: 256Mi
          limits:
            cpu: 1000m
            memory: 1Gi
        livenessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          exec:
            command:
              - mongosh
              - --eval
              - "db.adminCommand('ping')"
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 5
          failureThreshold: 2
        volumeMounts:
        - name: mongodb-storage
          mountPath: /data/db
        - name: mongodb-config
          mountPath: /etc/mongo
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop:
              - ALL
      volumes:
      - name: mongodb-storage
        persistentVolumeClaim:
          claimName: mongodb-pvc
      - name: mongodb-config
        configMap:
          name: mongodb-config
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - mongodb
              topologyKey: kubernetes.io/hostname
      tolerations:
      - key: "node-role.kubernetes.io/master"
        operator: "Exists"
        effect: "NoSchedule"
      - key: "node-role.kubernetes.io/control-plane"
        operator: "Exists"
        effect: "NoSchedule"

---
# 12. SERVICE (ClusterIP for internal communication)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
  namespace: mgdb-ns
  labels:
    app: mongodb
spec:
  type: ClusterIP
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: mongodb
    protocol: TCP
    name: mongodb
  sessionAffinity: None

---
# 13. SERVICE (Optional - NodePort for external access)
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service-nodeport
  namespace: mgdb-ns
  labels:
    app: mongodb
spec:
  type: NodePort
  selector:
    app: mongodb
  ports:
  - port: 27017
    targetPort: mongodb
    nodePort: 30017
    protocol: TCP
    name: mongodb
