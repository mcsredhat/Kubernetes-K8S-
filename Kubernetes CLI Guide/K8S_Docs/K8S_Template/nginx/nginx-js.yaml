# ============================================================================
# NGINX Front-End Kubernetes Deployment - Production Ready (FIXED)
# ============================================================================
# Key Fixes Applied:
# 1. Removed NET_BIND_SERVICE capability (not needed when not binding to privileged ports)
# 2. Changed nginx to run as root (runAsUser: 0) OR use unprivileged port 8080
# 3. Set readOnlyRootFilesystem: true with proper tmpfs volumes
# 4. Added proper tmpfs mounts for nginx to write files
# 5. Removed pod anti-affinity to allow flexible scheduling

---
# 1. CONFIGMAP: Store nginx.conf and custom configurations
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
data:
  nginx.conf: |
    user root;
    worker_processes auto;
    error_log stderr warn;
    pid /tmp/nginx.pid;
    
    events {
      worker_connections 1024;
    }
    
    http {
      include /etc/nginx/mime.types;
      default_type application/octet-stream;
      
      log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';
      
      access_log /dev/stdout main;
      
      sendfile on;
      tcp_nopush on;
      tcp_nodelay on;
      keepalive_timeout 65;
      types_hash_max_size 2048;
      client_max_body_size 20M;
      
      # Use DNS resolver for runtime resolution
      resolver 10.96.0.10 valid=10s ipv6=off;
      resolver_timeout 5s;
      
      # Rate limiting
      limit_req_zone $binary_remote_addr zone=general:10m rate=10r/s;
      limit_req_zone $binary_remote_addr zone=api:10m rate=30r/s;
      
      server {
        listen 8080 default_server;
        server_name _;
        
        # Health check endpoint
        location /health {
          access_log off;
          return 200 'OK';
          add_header Content-Type text/plain;
        }
        
        # Metrics endpoint (optional)
        location /metrics {
          access_log off;
          return 200 'metrics';
          add_header Content-Type text/plain;
        }
        
        # Main proxy to Node.js API
        location / {
          limit_req zone=api burst=50 nodelay;
          
          set $backend "node-api-service.mgdb-ns.svc.cluster.local:3000";
          proxy_pass http://$backend;
          
          # Important headers for proper request forwarding
          proxy_set_header Host $host;
          proxy_set_header X-Real-IP $remote_addr;
          proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
          proxy_set_header X-Forwarded-Proto $scheme;
          proxy_set_header X-Forwarded-Host $host;
          proxy_set_header X-Forwarded-Port $server_port;
          
          # Timeouts
          proxy_connect_timeout 60s;
          proxy_send_timeout 60s;
          proxy_read_timeout 60s;
          
          # Buffering
          proxy_buffering on;
          proxy_buffer_size 4k;
          proxy_buffers 8 4k;
        }
        
        # Deny access to sensitive files
        location ~ /\. {
          deny all;
          access_log off;
          log_not_found off;
        }
      }
    }

---
# 2. DEPLOYMENT: Manages NGINX pods and replicas
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-frontend-deployment
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
    version: "1.0.0"
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  selector:
    matchLabels:
      app: nginx-frontend
  template:
    metadata:
      labels:
        app: nginx-frontend
        version: "1.0.0"
    spec:
      serviceAccountName: default
      containers:
      - name: nginx
        image: nginx:stable-alpine
        imagePullPolicy: IfNotPresent
        command:
        - /usr/sbin/nginx
        args:
        - -g
        - daemon off;
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 200m
            memory: 256Mi
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 2
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 0
          periodSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: tmp
          mountPath: /tmp
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          runAsNonRoot: false
          runAsUser: 0
          capabilities:
            drop:
            - ALL
            add:
            - NET_BIND_SERVICE
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
          defaultMode: 0644
      - name: tmp
        emptyDir:
          medium: Memory
          sizeLimit: 512Mi
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst

---
# 3. SERVICE: Exposes NGINX to network (ClusterIP)
apiVersion: v1
kind: Service
metadata:
  name: nginx-frontend-service
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
spec:
  type: ClusterIP
  selector:
    app: nginx-frontend
  ports:
  - port: 80
    targetPort: 8080
    protocol: TCP
    name: http
  sessionAffinity: None

---
# 4. HPA: Auto-scale based on CPU
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: nginx-frontend-hpa
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: nginx-frontend-deployment
  minReplicas: 2
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 50
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 0
      policies:
      - type: Percent
        value: 100
        periodSeconds: 30
      - type: Pods
        value: 2
        periodSeconds: 30
      selectPolicy: Max

---
# 5. INGRESS: External HTTP/HTTPS routing rules
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: nginx-frontend-ingress
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
spec:
  ingressClassName: nginx
  tls:
  - hosts:
    - farajassulai.mygamesonline.org
    secretName: nginx-frontend-tls-secret
  rules:
  - host: farajassulai.mygamesonline.org
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: nginx-frontend-service
            port:
              number: 80

---
# 6. PDB: Pod Disruption Budget
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: nginx-frontend-pdb
  namespace: mgdb-ns
  labels:
    app: nginx-frontend
spec:
  minAvailable: 1
  selector:
    matchLabels:
      app: nginx-frontend
