# =============================================================================
# 4. STORAGE MANAGEMENT
# =============================================================================
# Components: StorageClass, PersistentVolumeClaim
# Use Case: Dynamic volume provisioning, persistent data storage
# =============================================================================

---
# StorageClass
# Description: Define storage provisioner and parameters for dynamic PV creation
# Use Case: Automatic volume provisioning, multi-tier storage strategies

apiVersion: storage.k8s.io/v1
kind: StorageClass
metadata:
  name: example-storageclass
  labels:
    storage: fast
  annotations:
    storageclass.kubernetes.io/is-default-class: "true"
    description: "Fast SSD storage class"
provisioner: kubernetes.io/aws-ebs
parameters:
  type: gp3
  iops: "3000"
  throughput: "125"
  encrypted: "true"
  kms-key-id: "arn:aws:kms:region:account:key/key-id"
  fsType: ext4
reclaimPolicy: Delete
volumeBindingMode: WaitForFirstConsumer
allowVolumeExpansion: true
mountOptions:
- discard
- noatime

# Apply Example:
# kubectl apply -f 4-storage-management.yaml
# kubectl get storageclass
# kubectl describe storageclass example-storageclass

# Customization Notes:
# - Set one as default using annotation
# - Adjust iops and throughput based on workload
# - Use Retain for critical data, Delete for ephemeral
# - Verify provisioner is available in your cluster

# Common Pitfalls:
# - Multiple default StorageClasses causing ambiguity
# - volumeBindingMode: Immediate binding before pod scheduling
# - Not accounting for encryption/replication overhead

---
# PersistentVolumeClaim
# Description: Request storage from StorageClass
# Use Case: App data storage, database volumes

apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: example-pvc
  namespace: example-namespace
  labels:
    storage: persistent
  annotations:
    description: "PVC for app data"
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: example-storageclass
  volumeMode: Filesystem

# Apply Example:
# kubectl apply -f 4-storage-management.yaml -n example-namespace
# kubectl get pvc -n example-namespace
# kubectl describe pvc example-pvc -n example-namespace

# Customization Notes:
# - Choose appropriate accessModes (RWO for databases, RWX for shared)
# - Use Block mode only for databases requiring raw block access
# - Monitor PVC capacity
# - If StorageClass doesn't exist, PVC will remain Pending indefinitely

# Common Pitfalls:
# - Using RWX when RWO suffices (performance penalty)
# - Not leaving headroom for growth
# - Mounting PVC with multiple pods using RWO (causes corruption)
# - PVC stuck in Pending state due to missing StorageClass