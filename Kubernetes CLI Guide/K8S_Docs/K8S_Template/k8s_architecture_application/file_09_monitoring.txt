# ============================================================================
# 09-monitoring.yaml - Complete Monitoring and Observability Stack (CORRECTED)
# ============================================================================
# Purpose: Deploys Prometheus, Grafana, and monitoring infrastructure
# Dependencies: None for monitoring namespace, creates its own resources
# Features: Metrics collection, dashboards, alerting, service discovery
# CRITICAL FIXES:
# - Fixed Grafana ConfigMap structure for proper provisioning
# - Corrected volume mount paths for dashboards and datasources
# - Fixed dashboard JSON structure and provisioning configuration
# ============================================================================

# Monitoring Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    kubernetes.io/metadata.name: monitoring
  annotations:
    description: "Monitoring infrastructure namespace"

---
# Prometheus RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources: ["nodes", "services", "endpoints", "pods"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: '{{APP_NAME}}-cluster'
        environment: '{{ENVIRONMENT}}'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
      
      - job_name: '{{APP_NAME}}'
        kubernetes_sd_configs:
        - role: service
          namespaces:
            names:
            - {{NAMESPACE}}
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_name]
          regex: {{APP_NAME}}-service
          action: keep
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_service_name

---
# Prometheus Alert Rules
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
data:
  {{APP_NAME}}-rules.yml: |
    groups:
    - name: {{APP_NAME}}.rules
      rules:
      - alert: HighCPUUsage
        expr: (rate(container_cpu_usage_seconds_total{pod=~"{{APP_NAME}}-.*"}[5m]) * 100) > 80
        for: 5m
        labels:
          severity: warning
          service: {{APP_NAME}}
        annotations:
          summary: "High CPU usage on {{ $labels.pod }}"
          description: "CPU usage above 80% for 5+ minutes"
      
      - alert: HighMemoryUsage
        expr: (container_memory_working_set_bytes{pod=~"{{APP_NAME}}-.*"} / container_spec_memory_limit_bytes{pod=~"{{APP_NAME}}-.*"} * 100) > 90
        for: 5m
        labels:
          severity: critical
          service: {{APP_NAME}}
        annotations:
          summary: "High memory usage on {{ $labels.pod }}"
          description: "Memory usage above 90% for 5+ minutes"
      
      - alert: PodNotReady
        expr: kube_pod_status_ready{condition="false",namespace="{{NAMESPACE}}",pod=~"{{APP_NAME}}-.*"} == 1
        for: 2m
        labels:
          severity: critical
          service: {{APP_NAME}}
        annotations:
          summary: "Pod {{ $labels.pod }} is not ready"
          description: "Pod has been in non-ready state for more than 2 minutes"

---
# Prometheus Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--storage.tsdb.retention.time=30d'
          - '--web.enable-lifecycle'
        ports:
        - containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        emptyDir:
          sizeLimit: 10Gi

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
spec:
  ports:
  - port: 9090
    targetPort: 9090
  selector:
    app: prometheus

---
# FIXED: Grafana Datasource Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning-datasources
  namespace: monitoring
data:
  datasources.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        url: http://prometheus.monitoring.svc.cluster.local:9090
        isDefault: true
        editable: true

---
# FIXED: Grafana Dashboard Provisioning Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-provisioning-dashboards
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# FIXED: Grafana Dashboard JSON
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboard-{{APP_NAME}}
  namespace: monitoring
data:
  {{APP_NAME}}-dashboard.json: |
    {
      "id": null,
      "uid": "{{APP_NAME}}-dashboard",
      "title": "{{APP_NAME}} Dashboard",
      "version": 1,
      "schemaVersion": 30,
      "timezone": "browser",
      "panels": [
        {
          "id": 1,
          "title": "CPU Usage",
          "type": "stat",
          "gridPos": {"h": 8, "w": 24, "x": 0, "y": 8},
          "targets": [
            {
              "expr": "sum(kube_pod_status_ready{condition=\"true\",namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"})",
              "legendFormat": "Ready Pods"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "unit": "none",
              "color": {"mode": "background"}
            }
          }
        }
      ],
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "refresh": "30s"
    }

---
# FIXED: Grafana Deployment with proper volume mounts
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "admin123"  # CHANGE THIS IN PRODUCTION
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        volumeMounts:
        - name: grafana-provisioning-datasources
          mountPath: /etc/grafana/provisioning/datasources
        - name: grafana-provisioning-dashboards
          mountPath: /etc/grafana/provisioning/dashboards
        - name: grafana-dashboard-{{APP_NAME}}
          mountPath: /var/lib/grafana/dashboards
        - name: grafana-storage
          mountPath: /var/lib/grafana
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "200m"
      volumes:
      - name: grafana-provisioning-datasources
        configMap:
          name: grafana-provisioning-datasources
      - name: grafana-provisioning-dashboards
        configMap:
          name: grafana-provisioning-dashboards
      - name: grafana-dashboard-{{APP_NAME}}
        configMap:
          name: grafana-dashboard-{{APP_NAME}}
      - name: grafana-storage
        emptyDir:
          sizeLimit: 2Gi

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
spec:
  ports:
  - port: 3000
    targetPort: 3000
  selector:
    app: grafana

---
# ServiceMonitor for Prometheus Operator (if installed)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{APP_NAME}}-servicemonitor
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/component: monitoring
    release: prometheus  # Required for Prometheus Operator
spec:
  selector:
    matchLabels:
      app: {{APP_NAME}}
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s, "w": 12, "x": 0, "y": 0},
          "targets": [
            {
              "expr": "avg(rate(container_cpu_usage_seconds_total{pod=~\"{{APP_NAME}}-.*\"}[5m]) * 100)",
              "legendFormat": "CPU %"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "unit": "percent",
              "color": {"mode": "thresholds"},
              "thresholds": {
                "steps": [
                  {"color": "green", "value": null},
                  {"color": "yellow", "value": 70},
                  {"color": "red", "value": 85}
                ]
              }
            }
          }
        },
        {
          "id": 2,
          "title": "Memory Usage",
          "type": "stat",
          "gridPos": {"h": 8, "w": 12, "x": 12, "y": 0},
          "targets": [
            {
              "expr": "avg(container_memory_working_set_bytes{pod=~\"{{APP_NAME}}-.*\"} / container_spec_memory_limit_bytes{pod=~\"{{APP_NAME}}-.*\"} * 100)",
              "legendFormat": "Memory %"
            }
          ],
          "fieldConfig": {
            "defaults": {
              "unit": "percent",
              "color": {"mode": "thresholds"},
              "thresholds": {
                "steps": [
                  {"color": "green", "value": null},
                  {"color": "yellow", "value": 80},
                  {"color": "red", "value": 90}
                ]
              }
            }
          }
        },
        {
          "id": 3,
          "title": "Pod Status",
          "type": "stat",
          "gridPos": {"h": 8