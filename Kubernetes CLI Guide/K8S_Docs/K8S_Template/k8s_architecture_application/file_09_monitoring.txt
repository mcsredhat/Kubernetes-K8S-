# ============================================================================
# 09-monitoring.yaml - Complete Monitoring and Observability Stack (FULLY CORRECTED)
# ============================================================================
# Purpose: Deploys Prometheus, Grafana, and monitoring infrastructure
# Dependencies: None for monitoring namespace, creates its own resources
# Features: Metrics collection, dashboards, alerting, service discovery
# ALL CRITICAL FIXES APPLIED:
# - Fixed complete Grafana dashboard JSON configuration
# - Corrected dashboard structure and all panel definitions
# - Fixed ServiceMonitor YAML syntax
# - Added proper resource limits to prevent resource exhaustion
# - Corrected volume mount configurations
# ============================================================================

# Monitoring Namespace
apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
  labels:
    name: monitoring
    kubernetes.io/metadata.name: monitoring
  annotations:
    description: "Monitoring infrastructure namespace"

---
# Prometheus RBAC
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
rules:
- apiGroups: [""]
  resources: ["nodes", "nodes/proxy", "services", "endpoints", "pods", "ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["configmaps"]
  verbs: ["get"]
- apiGroups: ["networking.k8s.io"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["extensions"]
  resources: ["ingresses"]
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: monitoring

---
# Prometheus Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
data:
  prometheus.yml: |
    global:
      scrape_interval: 15s
      evaluation_interval: 15s
      external_labels:
        cluster: '{{APP_NAME}}-cluster'
        environment: '{{ENVIRONMENT}}'
    
    rule_files:
      - "/etc/prometheus/rules/*.yml"
    
    scrape_configs:
      - job_name: 'prometheus'
        static_configs:
          - targets: ['localhost:9090']
      
      - job_name: 'kubernetes-pods'
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
            action: replace
            regex: ([^:]+)(?::\d+)?;(\d+)
            replacement: $1:$2
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: kubernetes_pod_name
      
      - job_name: 'kubernetes-services'
        kubernetes_sd_configs:
        - role: service
        relabel_configs:
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
          action: keep
          regex: true
        - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
          action: replace
          target_label: __metrics_path__
          regex: (.+)
        - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
          action: replace
          target_label: __address__
          regex: ([^:]+)(?::\d+)?;(\d+)
          replacement: $1:$2
        - action: labelmap
          regex: __meta_kubernetes_service_label_(.+)
        - source_labels: [__meta_kubernetes_namespace]
          action: replace
          target_label: kubernetes_namespace
        - source_labels: [__meta_kubernetes_service_name]
          action: replace
          target_label: kubernetes_name

---
# Prometheus Alert Rules - CORRECTED
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
data:
  {{APP_NAME}}-rules.yml: |
    groups:
    - name: {{APP_NAME}}.rules
      rules:
      - alert: HighCPUUsage
        expr: (rate(container_cpu_usage_seconds_total{pod=~"{{APP_NAME}}-.*"}[5m]) * 100) > 80
        for: 5m
        labels:
          severity: warning
          service: {{APP_NAME}}
          namespace: {{NAMESPACE}}
        annotations:
          summary: "High CPU usage on {{ $labels.pod }}"
          description: "CPU usage above 80% for 5+ minutes on pod {{ $labels.pod }}"
      
      - alert: HighMemoryUsage
        expr: (container_memory_working_set_bytes{pod=~"{{APP_NAME}}-.*"} / container_spec_memory_limit_bytes{pod=~"{{APP_NAME}}-.*"} * 100) > 90
        for: 5m
        labels:
          severity: critical
          service: {{APP_NAME}}
          namespace: {{NAMESPACE}}
        annotations:
          summary: "High memory usage on {{ $labels.pod }}"
          description: "Memory usage above 90% for 5+ minutes on pod {{ $labels.pod }}"
      
      - alert: PodNotReady
        expr: kube_pod_status_ready{condition="false",namespace="{{NAMESPACE}}",pod=~"{{APP_NAME}}-.*"} == 1
        for: 2m
        labels:
          severity: critical
          service: {{APP_NAME}}
          namespace: {{NAMESPACE}}
        annotations:
          summary: "Pod {{ $labels.pod }} is not ready"
          description: "Pod {{ $labels.pod }} has been in non-ready state for more than 2 minutes"
      
      - alert: PodCrashLooping
        expr: increase(kube_pod_container_status_restarts_total{namespace="{{NAMESPACE}}",pod=~"{{APP_NAME}}-.*"}[5m]) > 0
        for: 1m
        labels:
          severity: warning
          service: {{APP_NAME}}
          namespace: {{NAMESPACE}}
        annotations:
          summary: "Pod {{ $labels.pod }} is crash looping"
          description: "Pod {{ $labels.pod }} has restarted {{ $value }} times in the last 5 minutes"

---
# Prometheus Deployment - CORRECTED with proper resource limits
apiVersion: apps/v1
kind: Deployment
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
    spec:
      serviceAccountName: prometheus
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        fsGroup: 65534
      containers:
      - name: prometheus
        image: prom/prometheus:v2.48.0
        args:
          - '--config.file=/etc/prometheus/prometheus.yml'
          - '--storage.tsdb.path=/prometheus/'
          - '--storage.tsdb.retention.time=30d'
          - '--storage.tsdb.retention.size=10GB'
          - '--web.enable-lifecycle'
          - '--web.console.libraries=/etc/prometheus/console_libraries'
          - '--web.console.templates=/etc/prometheus/consoles'
        ports:
        - name: web
          containerPort: 9090
        volumeMounts:
        - name: prometheus-config
          mountPath: /etc/prometheus/
        - name: prometheus-storage
          mountPath: /prometheus/
        - name: prometheus-rules
          mountPath: /etc/prometheus/rules
        # CORRECTED: Added proper resource limits
        resources:
          requests:
            memory: "512Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "2Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        # Health checks
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: web
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /-/ready
            port: web
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: prometheus-config
        configMap:
          name: prometheus-config
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-storage
        emptyDir:
          sizeLimit: 15Gi

---
# Prometheus Service
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: monitoring
  labels:
    app: prometheus
    app.kubernetes.io/component: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "9090"
spec:
  ports:
  - name: web
    port: 9090
    targetPort: web
  selector:
    app: prometheus

---
# Grafana Configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        access: proxy
        orgId: 1
        url: http://prometheus.monitoring.svc.cluster.local:9090
        basicAuth: false
        isDefault: true
        version: 1
        editable: false
        jsonData:
          httpMethod: POST
          timeInterval: 15s

---
# CORRECTED: Complete and valid Grafana Dashboard JSON
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  {{APP_NAME}}-dashboard.json: |
    {
      "annotations": {
        "list": [
          {
            "builtIn": 1,
            "datasource": "-- Grafana --",
            "enable": true,
            "hide": true,
            "iconColor": "rgba(0, 211, 255, 1)",
            "name": "Annotations & Alerts",
            "type": "dashboard"
          }
        ]
      },
      "editable": true,
      "gnetId": null,
      "graphTooltip": 0,
      "id": null,
      "links": [],
      "panels": [
        {
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "auto",
                "displayMode": "auto"
              },
              "decimals": 2,
              "displayName": "",
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "yellow",
                    "value": 70
                  },
                  {
                    "color": "red",
                    "value": 85
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 0,
            "y": 0
          },
          "id": 1,
          "options": {
            "reduceOptions": {
              "values": false,
              "calcs": [
                "lastNotNull"
              ],
              "fields": ""
            },
            "orientation": "auto",
            "textMode": "auto",
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto"
          },
          "pluginVersion": "8.0.0",
          "targets": [
            {
              "expr": "avg(rate(container_cpu_usage_seconds_total{namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"}[5m]) * 100)",
              "interval": "",
              "legendFormat": "CPU Usage %",
              "refId": "A"
            }
          ],
          "title": "Average CPU Usage",
          "type": "stat"
        },
        {
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "thresholds"
              },
              "custom": {
                "align": "auto",
                "displayMode": "auto"
              },
              "decimals": 2,
              "displayName": "",
              "mappings": [],
              "max": 100,
              "min": 0,
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "yellow",
                    "value": 80
                  },
                  {
                    "color": "red",
                    "value": 90
                  }
                ]
              },
              "unit": "percent"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 12,
            "x": 12,
            "y": 0
          },
          "id": 2,
          "options": {
            "reduceOptions": {
              "values": false,
              "calcs": [
                "lastNotNull"
              ],
              "fields": ""
            },
            "orientation": "auto",
            "textMode": "auto",
            "colorMode": "value",
            "graphMode": "area",
            "justifyMode": "auto"
          },
          "pluginVersion": "8.0.0",
          "targets": [
            {
              "expr": "avg(container_memory_working_set_bytes{namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"} / container_spec_memory_limit_bytes{namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"} * 100)",
              "interval": "",
              "legendFormat": "Memory Usage %",
              "refId": "A"
            }
          ],
          "title": "Average Memory Usage",
          "type": "stat"
        },
        {
          "datasource": "Prometheus",
          "fieldConfig": {
            "defaults": {
              "color": {
                "mode": "palette-classic"
              },
              "custom": {
                "axisLabel": "",
                "axisPlacement": "auto",
                "barAlignment": 0,
                "drawStyle": "line",
                "fillOpacity": 10,
                "gradientMode": "none",
                "hideFrom": {
                  "legend": false,
                  "tooltip": false,
                  "vis": false
                },
                "lineInterpolation": "linear",
                "lineWidth": 1,
                "pointSize": 5,
                "scaleDistribution": {
                  "type": "linear"
                },
                "showPoints": "never",
                "spanNulls": true,
                "stacking": {
                  "group": "A",
                  "mode": "none"
                },
                "thresholdsStyle": {
                  "mode": "off"
                }
              },
              "decimals": 0,
              "displayName": "",
              "mappings": [],
              "thresholds": {
                "mode": "absolute",
                "steps": [
                  {
                    "color": "green",
                    "value": null
                  },
                  {
                    "color": "red",
                    "value": 80
                  }
                ]
              },
              "unit": "none"
            },
            "overrides": []
          },
          "gridPos": {
            "h": 8,
            "w": 24,
            "x": 0,
            "y": 8
          },
          "id": 3,
          "options": {
            "legend": {
              "calcs": [],
              "displayMode": "list",
              "placement": "bottom"
            },
            "tooltip": {
              "mode": "single"
            }
          },
          "pluginVersion": "8.0.0",
          "targets": [
            {
              "expr": "sum(kube_pod_status_ready{condition=\"true\",namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"})",
              "interval": "",
              "legendFormat": "Ready Pods",
              "refId": "A"
            },
            {
              "expr": "sum(kube_pod_status_ready{condition=\"false\",namespace=\"{{NAMESPACE}}\",pod=~\"{{APP_NAME}}-.*\"})",
              "interval": "",
              "legendFormat": "Not Ready Pods",
              "refId": "B"
            }
          ],
          "title": "Pod Status Over Time",
          "type": "timeseries"
        }
      ],
      "schemaVersion": 27,
      "style": "dark",
      "tags": [
        "{{APP_NAME}}",
        "{{ENVIRONMENT}}"
      ],
      "templating": {
        "list": []
      },
      "time": {
        "from": "now-6h",
        "to": "now"
      },
      "timepicker": {},
      "timezone": "",
      "title": "{{APP_NAME}} Dashboard",
      "uid": "{{APP_NAME}}-dashboard",
      "version": 1
    }

  dashboard-config.yaml: |
    apiVersion: 1
    providers:
      - name: 'default'
        orgId: 1
        folder: ''
        type: file
        disableDeletion: false
        updateIntervalSeconds: 10
        allowUiUpdates: true
        options:
          path: /var/lib/grafana/dashboards

---
# Grafana Deployment - CORRECTED with proper volumes and resource limits
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 472
        fsGroup: 472
      containers:
      - name: grafana
        image: grafana/grafana:10.2.0
        ports:
        - name: web
          containerPort: 3000
        env:
        - name: GF_SECURITY_ADMIN_PASSWORD
          value: "{{GRAFANA_ADMIN_PASSWORD:=admin123}}"  # CHANGE THIS IN PRODUCTION
        - name: GF_PATHS_PROVISIONING
          value: /etc/grafana/provisioning
        - name: GF_PATHS_DATA
          value: /var/lib/grafana
        - name: GF_PATHS_LOGS
          value: /var/log/grafana
        volumeMounts:
        - name: grafana-datasources
          mountPath: /etc/grafana/provisioning/datasources
          readOnly: true
        - name: grafana-dashboards-config
          mountPath: /etc/grafana/provisioning/dashboards
          readOnly: true
        - name: grafana-dashboards
          mountPath: /var/lib/grafana/dashboards
          readOnly: true
        - name: grafana-storage
          mountPath: /var/lib/grafana
        # CORRECTED: Added proper resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "512Mi"
            cpu: "200m"
            ephemeral-storage: "3Gi"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 60
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /api/health
            port: web
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: grafana-datasources
        configMap:
          name: grafana-datasources
      - name: grafana-dashboards-config
        configMap:
          name: grafana-dashboards
          items:
          - key: dashboard-config.yaml
            path: dashboards.yaml
      - name: grafana-dashboards
        configMap:
          name: grafana-dashboards
      - name: grafana-storage
        emptyDir:
          sizeLimit: 2Gi

---
# Grafana Service
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    app.kubernetes.io/component: monitoring
spec:
  ports:
  - name: web
    port: 3000
    targetPort: web
  selector:
    app: grafana

---
# CORRECTED: ServiceMonitor for Prometheus Operator (fixed YAML syntax)
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: {{APP_NAME}}-servicemonitor
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/name: {{APP_NAME}}
    app.kubernetes.io/component: monitoring
    app.kubernetes.io/part-of: {{APP_NAME}}
    release: prometheus  # Required for Prometheus Operator
spec:
  selector:
    matchLabels:
      app: {{APP_NAME}}
      app.kubernetes.io/name: {{APP_NAME}}
  endpoints:
  - port: http
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s
    honorLabels: true
  namespaceSelector:
    matchNames:
    - {{NAMESPACE}}