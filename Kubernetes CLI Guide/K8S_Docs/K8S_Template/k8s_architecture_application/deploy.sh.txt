#!/bin/bash
# ============================================================================
# deploy.sh - Kubernetes Template Deployment Script
# ============================================================================
# Purpose: Deploy Kubernetes manifests with proper template variable substitution
# Usage: ./deploy.sh [environment] [values-file]
# Dependencies: kubectl, envsubst (gettext package)
# ============================================================================

set -e

# Configuration
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
MANIFEST_DIR="${SCRIPT_DIR}/manifests"
VALUES_FILE="${SCRIPT_DIR}/values.yaml"
ENVIRONMENT="${1:-production}"
CUSTOM_VALUES_FILE="${2:-}"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    if ! command -v kubectl &> /dev/null; then
        log_error "kubectl is not installed or not in PATH"
        exit 1
    fi
    
    if ! command -v envsubst &> /dev/null; then
        log_error "envsubst is not installed. Install with: apt-get install gettext-base (Ubuntu/Debian) or brew install gettext (macOS)"
        exit 1
    fi
    
    if ! kubectl cluster-info &> /dev/null; then
        log_error "Cannot connect to Kubernetes cluster"
        exit 1
    fi
    
    log_success "Prerequisites check passed"
}

# Load values file
load_values() {
    local values_file="${CUSTOM_VALUES_FILE:-$VALUES_FILE}"
    
    if [[ ! -f "$values_file" ]]; then
        log_error "Values file not found: $values_file"
        log_info "Please copy values-template.yaml to values.yaml and customize it"
        exit 1
    fi
    
    log_info "Loading values from: $values_file"
    
    # Export all variables from values file
    while IFS='=' read -r key value || [[ -n "$key" ]]; do
        # Skip empty lines and comments
        [[ "$key" =~ ^[[:space:]]*# ]] && continue
        [[ -z "$key" ]] && continue
        
        # Remove quotes and export
        value=$(echo "$value" | sed 's/^["'\'']//' | sed 's/["'\'']$//')
        export "$key=$value"
        log_info "  $key=$value"
    done < <(grep -v '^#' "$values_file" | grep '=')
}

# Validate required variables
validate_variables() {
    log_info "Validating required variables..."
    
    local required_vars=(
        "APP_NAME"
        "NAMESPACE"
        "ENVIRONMENT"
        "DOMAIN"
        "STORAGE_CLASS"
        "STORAGE_SIZE"
    )
    
    local missing_vars=()
    
    for var in "${required_vars[@]}"; do
        if [[ -z "${!var}" ]]; then
            missing_vars+=("$var")
        fi
    done
    
    if [[ ${#missing_vars[@]} -gt 0 ]]; then
        log_error "Missing required variables:"
        for var in "${missing_vars[@]}"; do
            log_error "  - $var"
        done
        exit 1
    fi
    
    # Validate APP_NAME format
    if [[ ! "$APP_NAME" =~ ^[a-z0-9-]+$ ]]; then
        log_error "APP_NAME must contain only lowercase letters, numbers, and hyphens"
        exit 1
    fi
    
    log_success "Variable validation passed"
}

# Deploy manifest
deploy_manifest() {
    local file="$1"
    local filename=$(basename "$file")
    
    log_info "Processing $filename..."
    
    # Substitute variables and apply
    if envsubst < "$file" | kubectl apply -f -; then
        log_success "Applied $filename"
    else
        log_error "Failed to apply $filename"
        return 1
    fi
}

# Main deployment function
deploy() {
    log_info "Starting deployment for environment: $ENVIRONMENT"
    
    # Deployment order (important for dependencies)
    local manifest_files=(
        "01-namespace.yaml"
        "02-storage-corrected.yaml"
        "03-secrets-config.yaml"
        "04-rbac.yaml"
        "05-deployment-corrected.yaml"
        "06-services-ingress.yaml"
        "07-autoscaling-corrected.yaml"
        "08-security-network-corrected.yaml"
        "09-monitoring.yaml"
        "10-backup-maintenance.yaml"
    )
    
    for file in "${manifest_files[@]}"; do
        local filepath="${MANIFEST_DIR}/${file}"
        
        if [[ -f "$filepath" ]]; then
            deploy_manifest "$filepath"
        else
            log_warning "Manifest file not found: $filepath"
        fi
        
        # Brief pause between deployments
        sleep 2
    done
}

# Wait for rollout
wait_for_rollout() {
    log_info "Waiting for deployment rollout..."
    
    local deployments=(
        "${APP_NAME}-deployment"
        "${APP_NAME}-backend"
    )
    
    for deployment in "${deployments[@]}"; do
        if kubectl get deployment "$deployment" -n "$NAMESPACE" &> /dev/null; then
            log_info "Waiting for $deployment rollout..."
            kubectl rollout status deployment/"$deployment" -n "$NAMESPACE" --timeout=300s
        fi
    done
}

# Show status
show_status() {
    log_info "Deployment status:"
    echo
    
    log_info "Namespace: $NAMESPACE"
    kubectl get namespace "$NAMESPACE" 2>/dev/null || log_warning "Namespace not found"
    echo
    
    log_info "Pods:"
    kubectl get pods -n "$NAMESPACE" -o wide
    echo
    
    log_info "Services:"
    kubectl get svc -n "$NAMESPACE"
    echo
    
    log_info "Ingress:"
    kubectl get ingress -n "$NAMESPACE"
    echo
    
    log_info "PVCs:"
    kubectl get pvc -n "$NAMESPACE"
    echo
    
    if [[ -n "$DOMAIN" ]]; then
        log_info "Application should be accessible at: https://$DOMAIN"
    fi
}

# Cleanup function
cleanup() {
    log_warning "Cleaning up deployment for $APP_NAME in namespace $NAMESPACE"
    read -p "Are you sure? This will delete all resources. [y/N]: " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        kubectl delete namespace "$NAMESPACE" --ignore-not-found=true
        log_success "Cleanup completed"
    else
        log_info "Cleanup cancelled"
    fi
}

# Main script
main() {
    case "${1:-deploy}" in
        "deploy")
            check_prerequisites
            load_values
            validate_variables
            deploy
            wait_for_rollout
            show_status
            ;;
        "status")
            load_values
            show_status
            ;;
        "cleanup")
            load_values
            cleanup
            ;;
        "help"|"-h"|"--help")
            echo "Usage: $0 [command] [environment] [values-file]"
            echo ""
            echo "Commands:"
            echo "  deploy   - Deploy the application (default)"
            echo "  status   - Show deployment status"
            echo "  cleanup  - Delete all resources"
            echo "  help     - Show this help"
            echo ""
            echo "Examples:"
            echo "  $0 deploy production"
            echo "  $0 deploy staging ./values-staging.yaml"
            echo "  $0 status"
            echo "  $0 cleanup"
            ;;
        *)
            log_error "Unknown command: $1"
            log_info "Use '$0 help' for usage information"
            exit 1
            ;;
    esac
}

# Run main function with all arguments
main "$@"