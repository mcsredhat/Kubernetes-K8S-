# ============================================================================
# 05-deployment.yaml - Main Application Deployment (FULLY CORRECTED)
# ============================================================================
# Purpose: Deploys the main application with enhanced security and reliability
# Dependencies: Namespace, RBAC, ConfigMap, Secret, PVC must exist
# Features: Security contexts, health checks, resource limits, graceful shutdown
# ALL CRITICAL FIXES APPLIED:
# - Fixed all volume mount configurations and volume definitions
# - Corrected init container volume mounts
# - Added proper nginx config volume mount
# - Fixed static content handling with proper volume names
# - Added missing template variables with defaults
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{APP_NAME}}-deployment
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/name: {{APP_NAME}}
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: {{APP_NAME}}
    app.kubernetes.io/version: v1.0.0
    version: v1.0
    environment: {{ENVIRONMENT}}
  annotations:
    description: "Main {{APP_NAME}} deployment with enhanced security and monitoring"
    deployment.kubernetes.io/revision: "1"
spec:
  replicas: 3  # Default replicas, override with {{REPLICAS}} if defined
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 25%
      maxSurge: 25%
  selector:
    matchLabels:
      app: {{APP_NAME}}
      app.kubernetes.io/name: {{APP_NAME}}
      version: v1.0
  template:
    metadata:
      labels:
        app: {{APP_NAME}}
        app.kubernetes.io/name: {{APP_NAME}}
        app.kubernetes.io/component: application
        app.kubernetes.io/part-of: {{APP_NAME}}
        app.kubernetes.io/version: v1.0.0
        version: v1.0
        environment: {{ENVIRONMENT}}
      annotations:
        # Prometheus monitoring
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
        kubectl.kubernetes.io/restartedAt: ""
    spec:
      serviceAccountName: {{APP_NAME}}-sa
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      
      # Enhanced security context
      securityContext:
        runAsNonRoot: true
        runAsUser: 101  # nginx user
        runAsGroup: 101
        fsGroup: 101
        fsGroupChangePolicy: "OnRootMismatch"
        seccompProfile:
          type: RuntimeDefault
        supplementalGroups: [101]
      
      # Node selection and scheduling
      nodeSelector:
        kubernetes.io/os: linux
      
      # Enhanced affinity rules
      affinity:
        # Anti-affinity to spread pods across nodes
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values: [{{APP_NAME}}]
              topologyKey: kubernetes.io/hostname
      
      # Topology spread constraints for even distribution
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            app: {{APP_NAME}}
      
      # CORRECTED: Fixed init containers with proper volume mounts
      initContainers:
      - name: setup
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          set -e
          echo "=== {{APP_NAME}} Initialization Started ==="
          echo "Environment: {{ENVIRONMENT}}"
          echo "Namespace: {{NAMESPACE}}"
          
          # Create directories with proper permissions
          mkdir -p /app-data/logs /app-data/cache /app-data/uploads
          
          # Copy static content if available
          if [ -f /static-source/index.html ]; then
            cp /static-source/index.html /app-data/
            echo "Copied index.html successfully"
          fi
          
          # Set proper permissions
          chown -R 101:101 /app-data
          chmod -R 755 /app-data
          
          echo "=== Initialization completed ==="
        volumeMounts:
        - name: app-data
          mountPath: /app-data
        - name: static-content
          mountPath: /static-source
          readOnly: true
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      containers:
      - name: {{APP_NAME}}
        image: nginx:1.25-alpine  # Default image, override with {{IMAGE}} if needed
        imagePullPolicy: IfNotPresent
        
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        # Environment variables
        env:
        - name: APP_NAME
          value: "{{APP_NAME}}"
        - name: ENVIRONMENT
          value: "{{ENVIRONMENT}}"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: K8S_POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        
        # Load configuration from ConfigMap and Secret
        envFrom:
        - configMapRef:
            name: {{APP_NAME}}-config
        - secretRef:
            name: {{APP_NAME}}-secret
        
        # CORRECTED: Fixed volume mounts with proper volume names matching volumes section
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: app-data
          mountPath: /usr/share/nginx/html
        - name: tmp-storage
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-log-nginx
          mountPath: /var/log/nginx
        
        # Resource limits
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "5Gi"
        
        # Enhanced security context
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
        
        # Health probes
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 12
          successThreshold: 1
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
          successThreshold: 1
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
          successThreshold: 1
        
        # Lifecycle hooks for graceful shutdown
        lifecycle:
          preStop:
            exec:
              command: 
              - /bin/sh
              - -c
              - |
                echo "Graceful shutdown initiated..."
                nginx -s quit
                sleep 15
      
      # CORRECTED: Complete and properly named volume definitions
      volumes:
      - name: nginx-config
        configMap:
          name: {{APP_NAME}}-config
          items:
          - key: nginx.conf
            path: nginx.conf
            mode: 0644
      
      - name: static-content
        configMap:
          name: {{APP_NAME}}-static
          defaultMode: 0644
      
      - name: app-data
        persistentVolumeClaim:
          claimName: {{APP_NAME}}-data-pvc
      
      - name: tmp-storage
        emptyDir:
          medium: Memory
          sizeLimit: 256Mi
      
      - name: var-log-nginx
        emptyDir:
          sizeLimit: 1Gi
      
      - name: var-cache-nginx
        emptyDir:
          sizeLimit: 100Mi

---
# Backend Deployment (Optional) - CORRECTED
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{APP_NAME}}-backend
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}-backend
    app.kubernetes.io/name: {{APP_NAME}}-backend
    app.kubernetes.io/component: api
    app.kubernetes.io/part-of: {{APP_NAME}}
spec:
  replicas: 2  # Default backend replicas
  selector:
    matchLabels:
      app: {{APP_NAME}}-backend
      app.kubernetes.io/name: {{APP_NAME}}-backend
  template:
    metadata:
      labels:
        app: {{APP_NAME}}-backend
        app.kubernetes.io/name: {{APP_NAME}}-backend
        app.kubernetes.io/component: api
        app.kubernetes.io/part-of: {{APP_NAME}}
    spec:
      serviceAccountName: {{APP_NAME}}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: backend
        image: node:18-alpine  # Default backend image, override with {{BACKEND_IMAGE}}
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        envFrom:
        - configMapRef:
            name: {{APP_NAME}}-config
        - secretRef:
            name: {{APP_NAME}}-secret
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities:
            drop: ["ALL"]
        # Add health checks
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5