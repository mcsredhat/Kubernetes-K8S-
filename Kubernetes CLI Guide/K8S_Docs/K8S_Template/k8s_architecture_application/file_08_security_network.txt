# ============================================================================
# 08-security-network.yaml - Network Security and Traffic Control (FULLY CORRECTED)
# ============================================================================
# Purpose: Implements network segmentation and traffic policies for security
# Dependencies: Network policy controller must be enabled (Calico, Cilium, etc.)
# Features: Ingress/egress filtering, DNS restrictions, monitoring access
# ALL CRITICAL FIXES APPLIED:
# - Fixed namespace selectors to use flexible label matching
# - Corrected ingress rules to work with multiple ingress controllers
# - Balanced egress rules to maintain security without breaking functionality
# - Added proper DNS and cluster communication rules
# ============================================================================

# Network Policy - Controls traffic flow between pods and external services
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{APP_NAME}}-network-policy
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/name: {{APP_NAME}}
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: {{APP_NAME}}
  annotations:
    description: "Network policy for {{APP_NAME}} with balanced security and functionality"
spec:
  podSelector:
    matchLabels:
      app: {{APP_NAME}}
      app.kubernetes.io/name: {{APP_NAME}}
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # CORRECTED: Allow traffic from ingress controller (flexible namespace matching)
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Alternative ingress controller patterns
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Common ingress controller namespace names
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow monitoring systems to scrape metrics
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow Prometheus monitoring (common patterns)
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow communication within the same application namespace
  - from:
    - podSelector:
        matchLabels:
          app.kubernetes.io/part-of: {{APP_NAME}}
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow health checks from system components (kubelet, kube-proxy)
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow health checks from same namespace
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: {{NAMESPACE}}
    ports:
    - protocol: TCP
      port: 8080
  
  egress:
  # CORRECTED: DNS resolution (essential for cluster functionality)
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Communication with backend services in same namespace
  - to:
    - podSelector:
        matchLabels:
          app: {{APP_NAME}}-backend
    ports:
    - protocol: TCP
      port: 8080
  
  # CORRECTED: Kubernetes API server communication (essential for cluster operations)
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 6443
  
  # HTTP/HTTPS outbound for external APIs and services
  - to: []
    ports:
    - protocol: TCP
      port: 80
    - protocol: TCP
      port: 443
  
  # Database access within cluster
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  
  # Redis access within cluster
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379
  
  # Allow access to monitoring services
  - to:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 9090  # Prometheus
    - protocol: TCP
      port: 3000  # Grafana

---
# Network Policy for Backend Service - CORRECTED
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{APP_NAME}}-backend-network-policy
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}-backend
    app.kubernetes.io/name: {{APP_NAME}}-backend
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: {{APP_NAME}}
spec:
  podSelector:
    matchLabels:
      app: {{APP_NAME}}-backend
      app.kubernetes.io/name: {{APP_NAME}}-backend
  policyTypes:
  - Ingress
  - Egress
  
  ingress:
  # Allow traffic from main application
  - from:
    - podSelector:
        matchLabels:
          app: {{APP_NAME}}
          app.kubernetes.io/name: {{APP_NAME}}
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow monitoring (multiple patterns)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow direct ingress access (multiple ingress controller patterns)
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  - from:
    - namespaceSelector:
        matchLabels:
          app.kubernetes.io/name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow health checks from kube-system
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  
  egress:
  # DNS resolution
  - to: []
    ports:
    - protocol: UDP
      port: 53
    - protocol: TCP
      port: 53
  
  # Kubernetes API access
  - to: []
    ports:
    - protocol: TCP
      port: 443
    - protocol: TCP
      port: 6443
  
  # External API access
  - to: []
    ports:
    - protocol: TCP
      port: 443
  
  # Database access
  - to:
    - podSelector:
        matchLabels:
          app: postgres
    ports:
    - protocol: TCP
      port: 5432
  
  # Cache access
  - to:
    - podSelector:
        matchLabels:
          app: redis
    ports:
    - protocol: TCP
      port: 6379

---
# CORRECTED: Simplified and functional monitoring access policy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{APP_NAME}}-monitoring-access
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/component: security
    app.kubernetes.io/part-of: {{APP_NAME}}
spec:
  podSelector:
    matchLabels:
      app.kubernetes.io/part-of: {{APP_NAME}}
  policyTypes:
  - Ingress
  ingress:
  # Allow monitoring from monitoring namespace (flexible matching)
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: monitoring
    ports:
    - protocol: TCP
      port: 8080
  
  # Allow monitoring from kube-system (for metrics-server)
  - from:
    - namespaceSelector:
        matchLabels:
          name: kube-system
    ports:
    - protocol: TCP
      port: 8080
  
  - from:
    - namespaceSelector:
        matchLabels:
          kubernetes.io/metadata.name: kube-system
    ports:
    - protocol: TCP
      port: 8080

---
# Default Deny All Policy (Optional - for maximum security)
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{APP_NAME}}-default-deny
  namespace: {{NAMESPACE}}
  labels:
    app: {{APP_NAME}}
    app.kubernetes.io/component: security
  annotations:
    description: "Default deny all traffic - enable only when all specific policies are configured"
spec:
  podSelector: {}
  policyTypes:
  - Ingress
  - Egress