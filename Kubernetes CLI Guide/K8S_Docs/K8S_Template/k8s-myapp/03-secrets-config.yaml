# ============================================================================
# 03-secrets-config.yaml - Secrets and Configuration Management (CORRECTED)
# ============================================================================
# Purpose: Stores sensitive data and application configuration
# Dependencies: None, but must be created before deployments
# Security: CRITICAL - Variables will be substituted from values.env
# FIXES: All secrets now use variable substitution instead of hardcoded values
# ============================================================================

# Secret - Sensitive application data
apiVersion: v1
kind: Secret
metadata:
  name: ${APP_NAME}-secret
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/component: credentials
    app.kubernetes.io/part-of: ${APP_NAME}
    environment: ${ENVIRONMENT}
  annotations:
    description: "Sensitive configuration for ${APP_NAME}"
    secret.kubernetes.io/rotation-time: "2160h" # 90 days
type: Opaque
stringData:
  # Database credentials - substituted from values.env
  database-username: "${DATABASE_USERNAME}"
  database-password: "${DATABASE_PASSWORD}"
  
  # API security - substituted from values.env
  api-key: "${API_KEY}"
  
  # Encryption keys - substituted from values.env
  jwt-secret: "${JWT_SECRET}"
  encryption-key: "${ENCRYPTION_KEY}"
  
  # Connection strings - auto-constructed with variables
  database-url: "postgresql://${DATABASE_USERNAME}:${DATABASE_PASSWORD}@postgres.${NAMESPACE}.svc.cluster.local:5432/${APP_NAME}_db?sslmode=require"
  redis-url: "${REDIS_URL}"
  
  # Monitoring credentials - substituted from values.env
  grafana-admin-password: "${GRAFANA_ADMIN_PASSWORD}"

---
# ConfigMap - Application configuration (non-sensitive)
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-config
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/component: configuration
    app.kubernetes.io/part-of: ${APP_NAME}
    environment: ${ENVIRONMENT}
  annotations:
    description: "Application configuration for ${APP_NAME}"
data:
  # Environment-specific variables
  ENVIRONMENT: "${ENVIRONMENT}"
  APP_NAME: "${APP_NAME}"
  DOMAIN: "${DOMAIN}"
  NAMESPACE: "${NAMESPACE}"
  
  # Application configuration
  SERVER_PORT: "8080"
  LOG_LEVEL: "info"
  LOG_FORMAT: "json"
  MAX_CONNECTIONS: "1000"
  WORKER_PROCESSES: "auto"
  GRACEFUL_SHUTDOWN_TIMEOUT: "30"
  
  # Health check configuration
  HEALTH_CHECK_PATH: "/health"
  READINESS_CHECK_PATH: "/ready"
  METRICS_PATH: "/metrics"
  
  # Nginx configuration with production optimizations
  nginx.conf: |
    # Global configuration
    user nginx;
    worker_processes auto;
    error_log /var/log/nginx/error.log warn;
    pid /var/run/nginx.pid;
    
    events {
        worker_connections 1024;
        use epoll;
        multi_accept on;
    }
    
    http {
        include /etc/nginx/mime.types;
        default_type application/octet-stream;
        
        # Performance optimizations
        sendfile on;
        tcp_nopush on;
        tcp_nodelay on;
        keepalive_timeout 65;
        server_tokens off;
        
        # Rate limiting zones
        limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
        limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
        
        # Logging format
        log_format json_combined escape=json
            '{'
                '"timestamp":"$time_iso8601",'
                '"remote_addr":"$remote_addr",'
                '"request_method":"$request_method",'
                '"request_uri":"$request_uri",'
                '"status":"$status",'
                '"body_bytes_sent":"$body_bytes_sent",'
                '"request_time":"$request_time",'
                '"http_user_agent":"$http_user_agent"'
            '}';
        
        # Upstream for backend services
        upstream backend {
            least_conn;
            server ${APP_NAME}-backend.${NAMESPACE}.svc.cluster.local:8080 max_fails=3 fail_timeout=30s;
            keepalive 32;
        }
        
        # Main server configuration
        server {
            listen 8080 default_server;
            server_name ${DOMAIN} _;
            root /usr/share/nginx/html;
            index index.html;
            
            # Security headers
            add_header X-Frame-Options "SAMEORIGIN" always;
            add_header X-XSS-Protection "1; mode=block" always;
            add_header X-Content-Type-Options "nosniff" always;
            
            access_log /var/log/nginx/access.log json_combined;
            
            # Health endpoints
            location = /health {
                access_log off;
                return 200 '{"status":"healthy","service":"${APP_NAME}","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
            
            location = /ready {
                access_log off;
                return 200 '{"status":"ready","service":"${APP_NAME}","timestamp":"$time_iso8601"}';
                add_header Content-Type application/json;
            }
            
            location = /metrics {
                access_log off;
                allow 10.0.0.0/8;
                allow 172.16.0.0/12;
                allow 192.168.0.0/16;
                deny all;
                stub_status on;
            }
            
            # API routes with rate limiting
            location /api/ {
                limit_req zone=api burst=20 nodelay;
                proxy_pass http://backend/;
                proxy_set_header Host $host;
                proxy_set_header X-Real-IP $remote_addr;
                proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                proxy_set_header X-Forwarded-Proto $scheme;
            }
            
            # Static files
            location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
                expires 1y;
                add_header Cache-Control "public, immutable";
            }
            
            # Default location
            location / {
                try_files $uri $uri/ /index.html;
            }
        }
    }

---
# Separate ConfigMap for HTML content
apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-static
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/component: static-content
    app.kubernetes.io/part-of: ${APP_NAME}
data:
  index.html: |
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1.0">
        <title>${APP_NAME} - ${ENVIRONMENT} Dashboard</title>
        <style>
            body { font-family: Arial, sans-serif; margin: 0; padding: 20px; background: linear-gradient(135deg, #667eea 0%, #764ba2 100%); color: white; }
            .container { max-width: 1200px; margin: 0 auto; background: rgba(255,255,255,0.1); padding: 40px; border-radius: 20px; }
            h1 { text-align: center; font-size: 3rem; margin-bottom: 40px; }
            .status { text-align: center; background: #28a745; padding: 10px 20px; border-radius: 25px; display: inline-block; }
            .grid { display: grid; grid-template-columns: repeat(auto-fit, minmax(350px, 1fr)); gap: 30px; margin: 40px 0; }
            .card { background: rgba(255,255,255,0.1); padding: 30px; border-radius: 15px; }
            .links { text-align: center; margin-top: 40px; }
            .btn { display: inline-block; margin: 10px; padding: 12px 24px; background: rgba(255,255,255,0.2); color: white; text-decoration: none; border-radius: 30px; }
        </style>
    </head>
    <body>
        <div class="container">
            <h1>${APP_NAME}</h1>
            <div class="status">SYSTEM OPERATIONAL</div>
            <div class="grid">
                <div class="card">
                    <h3>System Info</h3>
                    <p>Environment: ${ENVIRONMENT}</p>
                    <p>Namespace: ${NAMESPACE}</p>
                    <p>Domain: ${DOMAIN}</p>
                </div>
                <div class="card">
                    <h3>Storage</h3>
                    <p>Data Volume: ${STORAGE_SIZE}</p>
                    <p>Storage Class: ${STORAGE_CLASS}</p>
                </div>
            </div>
            <div class="links">
                <a href="/health" class="btn">Health Check</a>
                <a href="/ready" class="btn">Readiness</a>
                <a href="/metrics" class="btn">Metrics</a>
            </div>
        </div>
    </body>
    </html>