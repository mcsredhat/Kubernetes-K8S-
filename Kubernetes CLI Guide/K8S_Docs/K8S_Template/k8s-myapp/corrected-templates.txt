# ============================================================================
# CORRECTED: 01-namespace.yaml
# FIX: Changed ingresses.networking.k8s.io to use count/ prefix
# ============================================================================

apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}
  labels:
    name: ${NAMESPACE}
    environment: ${ENVIRONMENT}
    team: ${TEAM}
    app.kubernetes.io/managed-by: kubectl
    pod-security.kubernetes.io/enforce: baseline
    pod-security.kubernetes.io/audit: baseline
    pod-security.kubernetes.io/warn: baseline
  annotations:
    description: "Namespace for ${APP_NAME} application in ${ENVIRONMENT} environment"
    contact: "${TEAM}@company.com"
    created-by: "k8s-template-v2.0"
spec:
  finalizers: ["kubernetes"]

---
apiVersion: v1
kind: ResourceQuota
metadata:
  name: ${NAMESPACE}-quota
  namespace: ${NAMESPACE}
  labels:
    component: resource-management
    app.kubernetes.io/part-of: ${APP_NAME}
spec:
  hard:
    requests.cpu: "2000m"
    requests.memory: "4Gi"
    limits.cpu: "4000m"
    limits.memory: "8Gi"
    requests.storage: "100Gi"
    persistentvolumeclaims: "5"
    pods: "10"
    services: "5"
    secrets: "10"
    configmaps: "10"
    count/ingresses.networking.k8s.io: "5"

---
apiVersion: v1
kind: LimitRange
metadata:
  name: ${NAMESPACE}-limits
  namespace: ${NAMESPACE}
  labels:
    component: resource-management
    app.kubernetes.io/part-of: ${APP_NAME}
spec:
  limits:
  - type: Container
    default:
      cpu: 500m
      memory: 512Mi
      ephemeral-storage: 1Gi
    defaultRequest:
      cpu: 100m
      memory: 128Mi
      ephemeral-storage: 500Mi
    max:
      cpu: 2000m
      memory: 2Gi
      ephemeral-storage: 5Gi
    min:
      cpu: 50m
      memory: 64Mi
      ephemeral-storage: 100Mi
  - type: PersistentVolumeClaim
    max:
      storage: 50Gi
    min:
      storage: 1Gi

---
# ============================================================================
# CORRECTED: 05-deployment.yaml - Init Container Security
# FIX: Removed init container that requires root, simplified setup
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-deployment
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: ${APP_NAME}
    version: v1.0
    environment: ${ENVIRONMENT}
spec:
  replicas: ${REPLICAS}
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
      version: v1.0
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/name: ${APP_NAME}
        version: v1.0
        environment: ${ENVIRONMENT}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ${APP_NAME}-sa
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      
      # Simplified init container - no root required
      initContainers:
      - name: setup
        image: busybox:1.36
        command: ['sh', '-c']
        args:
        - |
          echo "=== ${APP_NAME} Initialization ==="
          mkdir -p /usr/share/nginx/html/logs /usr/share/nginx/html/cache
          if [ -f /static-source/index.html ]; then
            cp /static-source/index.html /usr/share/nginx/html/
            echo "✓ Static content copied"
          fi
          chmod -R 755 /usr/share/nginx/html
          echo "✓ Setup complete"
        volumeMounts:
        - name: nginx-html
          mountPath: /usr/share/nginx/html
        - name: static-content
          mountPath: /static-source
          readOnly: true
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      containers:
      - name: ${APP_NAME}
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        
        env:
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: ENVIRONMENT
          value: "${ENVIRONMENT}"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        
        envFrom:
        - configMapRef:
            name: ${APP_NAME}-config
        - secretRef:
            name: ${APP_NAME}-secret
        
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-html
          mountPath: /usr/share/nginx/html
        - name: app-data
          mountPath: /data
        - name: tmp-storage
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-log-nginx
          mountPath: /var/log/nginx
        - name: var-run
          mountPath: /var/run
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"
        
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
          seccompProfile:
            type: RuntimeDefault
        
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12
        
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3
        
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 3
      
      volumes:
      - name: nginx-config
        configMap:
          name: ${APP_NAME}-config
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: static-content
        configMap:
          name: ${APP_NAME}-static
      - name: nginx-html
        emptyDir:
          sizeLimit: 1Gi
      - name: app-data
        persistentVolumeClaim:
          claimName: ${APP_NAME}-data-pvc
      - name: tmp-storage
        emptyDir:
          sizeLimit: 256Mi
      - name: var-log-nginx
        emptyDir:
          sizeLimit: 500Mi
      - name: var-cache-nginx
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run
        emptyDir:
          sizeLimit: 10Mi

---
# Backend Deployment - Using nginx since node needs app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-backend
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}-backend
    app.kubernetes.io/name: ${APP_NAME}-backend
    app.kubernetes.io/component: api
spec:
  replicas: ${BACKEND_REPLICAS}
  selector:
    matchLabels:
      app: ${APP_NAME}-backend
  template:
    metadata:
      labels:
        app: ${APP_NAME}-backend
        app.kubernetes.io/name: ${APP_NAME}-backend
    spec:
      serviceAccountName: ${APP_NAME}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: backend
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /var/cache/nginx
        - name: run
          mountPath: /var/run
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: ["ALL"]
            add: ["NET_BIND_SERVICE"]
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: run
        emptyDir: {}

---
# ============================================================================
# CORRECTED: 10-backup-maintenance.yaml - Security Context Fixes
# FIX: Added proper security contexts to all containers
# ============================================================================

apiVersion: v1
kind: ConfigMap
metadata:
  name: ${APP_NAME}-backup-registry
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/component: backup
data:
  last-successful-backup: ""
  backup-count: "0"
  last-restore: ""

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ${APP_NAME}-backup-pvc
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/component: backup-storage
spec:
  accessModes:
  - ReadWriteOnce
  storageClassName: "${STORAGE_CLASS}"
  resources:
    requests:
      storage: ${BACKUP_STORAGE_SIZE}

---
# Enhanced Backup CronJob with proper security
apiVersion: batch/v1
kind: CronJob
metadata:
  name: ${APP_NAME}-backup
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/component: backup
spec:
  schedule: "${BACKUP_SCHEDULE}"
  successfulJobsHistoryLimit: 3
  failedJobsHistoryLimit: 1
  concurrencyPolicy: Forbid
  jobTemplate:
    spec:
      activeDeadlineSeconds: 3600
      template:
        spec:
          restartPolicy: OnFailure
          serviceAccountName: ${APP_NAME}-sa
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            runAsGroup: 65534
            fsGroup: 65534
            seccompProfile:
              type: RuntimeDefault
          containers:
          - name: backup
            image: bitnami/kubectl:latest
            command:
            - /bin/bash
            - -c
            - |
              set -e
              BACKUP_DATE=$(date +%Y%m%d_%H%M%S)
              BACKUP_DIR="/backup/${BACKUP_DATE}"
              
              echo "=== Backup Started: $(date) ==="
              mkdir -p "${BACKUP_DIR}"
              
              if [ -d "/data" ] && [ "$(ls -A /data 2>/dev/null)" ]; then
                tar -czf "${BACKUP_DIR}/app-data.tar.gz" -C /data . 2>/dev/null || true
                echo "✓ Data backed up"
              fi
              
              # Get deployment info
              REPLICAS=$(kubectl get deployment ${APP_NAME}-deployment -n ${NAMESPACE} -o jsonpath='{.spec.replicas}' 2>/dev/null || echo "0")
              
              # Create metadata
              cat > "${BACKUP_DIR}/backup-info.json" << EOF
              {
                "app": "${APP_NAME}",
                "backup_date": "${BACKUP_DATE}",
                "deployment_replicas": "${REPLICAS}"
              }
              EOF
              
              # Checksums
              cd "${BACKUP_DIR}"
              [ -f "app-data.tar.gz" ] && sha256sum app-data.tar.gz > checksums.sha256
              
              # Update registry
              kubectl patch configmap ${APP_NAME}-backup-registry -n ${NAMESPACE} \
                --type merge -p "{\"data\":{\"last-successful-backup\":\"${BACKUP_DATE}\"}}" 2>/dev/null || true
              
              # Cleanup old backups
              find /backup -name "20*" -type d -mtime +${BACKUP_RETENTION_DAYS} -exec rm -rf {} + 2>/dev/null || true
              
              echo "=== Backup Complete ==="
            
            volumeMounts:
            - name: app-data
              mountPath: /data
              readOnly: true
            - name: backup-storage
              mountPath: /backup
            
            securityContext:
              runAsUser: 65534
              runAsGroup: 65534
              runAsNonRoot: true
              allowPrivilegeEscalation: false
              capabilities:
                drop: ["ALL"]
              seccompProfile:
                type: RuntimeDefault
            
            resources:
              requests:
                memory: "256Mi"
                cpu: "100m"
              limits:
                memory: "1Gi"
                cpu: "500m"
          
          volumes:
          - name: app-data
            persistentVolumeClaim:
              claimName: ${APP_NAME}-data-pvc
          - name: backup-storage
            persistentVolumeClaim:
              claimName: ${APP_NAME}-backup-pvc

---
# CORRECTED: Rollback Job with proper security contexts
apiVersion: batch/v1
kind: Job
metadata:
  name: ${APP_NAME}-rollback
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/component: rollback
spec:
  activeDeadlineSeconds: 3600
  backoffLimit: 1
  template:
    spec:
      restartPolicy: Never
      serviceAccountName: ${APP_NAME}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
        runAsGroup: 65534
        fsGroup: 65534
        seccompProfile:
          type: RuntimeDefault
      
      initContainers:
      - name: pre-rollback-check
        image: busybox:1.36
        command: ['/bin/sh', '-c']
        args:
        - |
          LATEST_BACKUP=$(ls -t /backup | grep "^20" | head -n 1)
          if [ -z "$LATEST_BACKUP" ]; then
            echo "ERROR: No backup found!"
            exit 1
          fi
          echo "$LATEST_BACKUP" > /shared/backup-to-restore
          echo "✓ Found backup: $LATEST_BACKUP"
        volumeMounts:
        - name: backup-storage
          mountPath: /backup
          readOnly: true
        - name: shared
          mountPath: /shared
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      
      containers:
      - name: rollback
        image: bitnami/kubectl:latest
        command: ['/bin/bash', '-c']
        args:
        - |
          set -e
          echo "=== ROLLBACK STARTED ==="
          
          BACKUP_TO_RESTORE=$(cat /shared/backup-to-restore)
          echo "Using backup: $BACKUP_TO_RESTORE"
          
          # Scale down
          ORIGINAL_REPLICAS=$(kubectl get deployment ${APP_NAME}-deployment -n ${NAMESPACE} -o jsonpath='{.spec.replicas}')
          kubectl scale deployment ${APP_NAME}-deployment --replicas=0 -n ${NAMESPACE}
          sleep 10
          
          # Restore data
          if [ -f "/backup/$BACKUP_TO_RESTORE/app-data.tar.gz" ]; then
            rm -rf /data/* 2>/dev/null || true
            tar -xzf "/backup/$BACKUP_TO_RESTORE/app-data.tar.gz" -C /data
            echo "✓ Data restored"
          fi
          
          # Scale up
          kubectl scale deployment ${APP_NAME}-deployment --replicas=$ORIGINAL_REPLICAS -n ${NAMESPACE}
          
          echo "=== ROLLBACK COMPLETE ==="
        
        volumeMounts:
        - name: app-data
          mountPath: /data
        - name: backup-storage
          mountPath: /backup
          readOnly: true
        - name: shared
          mountPath: /shared
          readOnly: true
        
        securityContext:
          runAsUser: 65534
          runAsGroup: 65534
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: ["ALL"]
          seccompProfile:
            type: RuntimeDefault
        
        resources:
          requests:
            memory: "256Mi"
            cpu: "100m"
          limits:
            memory: "1Gi"
            cpu: "500m"
      
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: ${APP_NAME}-data-pvc
      - name: backup-storage
        persistentVolumeClaim:
          claimName: ${APP_NAME}-backup-pvc
      - name: shared
        emptyDir: {}