# ============================================================================
# CORRECTED: 05-deployment.yaml - Init Container Security
# FIX: Removed init container that requires root, simplified setup
# ============================================================================

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-deployment
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}
    app.kubernetes.io/name: ${APP_NAME}
    app.kubernetes.io/component: application
    app.kubernetes.io/part-of: ${APP_NAME}
    version: v1.0
    environment: ${ENVIRONMENT}
spec:
  replicas: ${REPLICAS}
  revisionHistoryLimit: 3
  progressDeadlineSeconds: 600
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: ${APP_NAME}
      version: v1.0
  template:
    metadata:
      labels:
        app: ${APP_NAME}
        app.kubernetes.io/name: ${APP_NAME}
        version: v1.0
        environment: ${ENVIRONMENT}
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: ${APP_NAME}-sa
      terminationGracePeriodSeconds: 30
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        runAsGroup: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault

      # Simplified init container - no root required
      initContainers:
      - name: setup
        image: busybox:1.36
        command: [ 'sh', '-c' ]
        args:
        - |
          echo "=== ${APP_NAME} Initialization ==="
          mkdir -p /usr/share/nginx/html/logs /usr/share/nginx/html/cache
          if [ -f /static-source/index.html ]; then
            cp /static-source/index.html /usr/share/nginx/html/
            echo "✓ Static content copied"
          fi
          chmod -R 755 /usr/share/nginx/html
          echo "✓ Setup complete"
        volumeMounts:
        - name: nginx-html
          mountPath: /usr/share/nginx/html
        - name: static-content
          mountPath: /static-source
          readOnly: true
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          capabilities:
            drop: [ "ALL" ]
          seccompProfile:
            type: RuntimeDefault
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"

      containers:
      - name: ${APP_NAME}
        image: ${IMAGE}
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP

        env:
        - name: APP_NAME
          value: "${APP_NAME}"
        - name: ENVIRONMENT
          value: "${ENVIRONMENT}"
        - name: K8S_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: K8S_POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name

        envFrom:
        - configMapRef:
            name: ${APP_NAME}-config
        - secretRef:
            name: ${APP_NAME}-secret

        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
          readOnly: true
        - name: nginx-html
          mountPath: /usr/share/nginx/html
        - name: app-data
          mountPath: /data
        - name: tmp-storage
          mountPath: /tmp
        - name: var-cache-nginx
          mountPath: /var/cache/nginx
        - name: var-log-nginx
          mountPath: /var/log/nginx
        - name: var-run
          mountPath: /var/run

        resources:
          requests:
            memory: "256Mi"
            cpu: "200m"
            ephemeral-storage: "1Gi"
          limits:
            memory: "1Gi"
            cpu: "1000m"
            ephemeral-storage: "2Gi"

        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ "ALL" ]
            add: [ "NET_BIND_SERVICE" ]
          seccompProfile:
            type: RuntimeDefault

        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 5
          failureThreshold: 12

        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          failureThreshold: 3

      volumes:
      - name: nginx-config
        configMap:
          name: ${APP_NAME}-config
          items:
          - key: nginx.conf
            path: nginx.conf
      - name: static-content
        configMap:
          name: ${APP_NAME}-static
      - name: nginx-html
        emptyDir:
          sizeLimit: 1Gi
      - name: app-data
        persistentVolumeClaim:
          claimName: ${APP_NAME}-data-pvc
      - name: tmp-storage
        emptyDir:
          sizeLimit: 256Mi
      - name: var-log-nginx
        emptyDir:
          sizeLimit: 500Mi
      - name: var-cache-nginx
        emptyDir:
          sizeLimit: 100Mi
      - name: var-run
        emptyDir:
          sizeLimit: 10Mi
---
# Backend Deployment - Using nginx since node needs app
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${APP_NAME}-backend
  namespace: ${NAMESPACE}
  labels:
    app: ${APP_NAME}-backend
    app.kubernetes.io/name: ${APP_NAME}-backend
    app.kubernetes.io/component: api
spec:
  replicas: ${BACKEND_REPLICAS}
  selector:
    matchLabels:
      app: ${APP_NAME}-backend
  template:
    metadata:
      labels:
        app: ${APP_NAME}-backend
        app.kubernetes.io/name: ${APP_NAME}-backend
    spec:
      serviceAccountName: ${APP_NAME}-sa
      securityContext:
        runAsNonRoot: true
        runAsUser: 101
        fsGroup: 101
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: backend
        image: nginx:1.25-alpine
        ports:
        - name: http
          containerPort: 8080
        resources:
          requests:
            memory: "128Mi"
            cpu: "100m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /var/cache/nginx
        - name: run
          mountPath: /var/run
        securityContext:
          runAsUser: 101
          runAsGroup: 101
          runAsNonRoot: true
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: false
          capabilities:
            drop: [ "ALL" ]
            add: [ "NET_BIND_SERVICE" ]
          seccompProfile:
            type: RuntimeDefault
        livenessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: tmp
        emptyDir: {}
      - name: cache
        emptyDir: {}
      - name: run
        emptyDir: {}
---

