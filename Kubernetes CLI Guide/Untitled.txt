
## Step 1: Create the messaging namespace
```bash
kubectl create namespace messaging
```

## Step 2: Generate the RabbitMQ YAML file
```bash
kubectl run rabbitmq \
  --image=rabbitmq:3-management \
  --port=5672 \
  --restart=Always \
  --namespace=messaging \
  --labels="app=rabbitmq,tier=messaging,version=3" \
  --annotations="description=RabbitMQ message broker,owner=messaging-team" \
  --env="RABBITMQ_DEFAULT_USER=admin" \
  --env="RABBITMQ_DEFAULT_PASS=RabbitPass123" \
  --overrides='{
    "spec": {
      "containers": [{
        "name": "rabbitmq",
        "image": "rabbitmq:3-management",
        "ports": [{"containerPort": 5672}, {"containerPort": 15672}],
        "resources": {
          "requests": {"memory": "256Mi", "cpu": "200m"},
          "limits": {"memory": "512Mi", "cpu": "400m"}
        },
        "livenessProbe": {
          "exec": {"command": ["rabbitmqctl", "status"]},
          "initialDelaySeconds": 60, "periodSeconds": 30
        }
      }]
    }
  }' \
  --dry-run=client \
  --output=yaml > rabbitmq.yaml
```

## Step 3: Apply the YAML to create the pod
```bash
kubectl apply -f rabbitmq.yaml
```

## Step 4: Check pod status
```bash
kubectl get pods -n messaging
```
*Expected: Pod should show `Running` status after 1-2 minutes*

## Step 5: Wait for pod to be ready
```bash
kubectl wait --for=condition=Ready pod/rabbitmq -n messaging --timeout=300s
```

## Step 6: Check pod logs to verify startup
```bash
kubectl logs rabbitmq -n messaging
```
*Look for: "Server startup complete" or "Ready to accept connections"*

## Step 7: Test RabbitMQ Management UI (port 15672)
```bash
kubectl port-forward pod/rabbitmq -n messaging 15672:15672
```
*Keep this terminal open, then open a new terminal*

## Step 8: Access Management UI (in new terminal/browser)
Open your browser and go to:
```
http://localhost:15672
```
*Login with: username=`admin`, password=`RabbitPass123`*

## Step 9: Test RabbitMQ AMQP port (5672)
In another terminal:
```bash
kubectl port-forward pod/rabbitmq -n messaging 5672:5672
```

## Step 10: Verify RabbitMQ status from inside the pod
```bash
kubectl exec -it rabbitmq -n messaging -- rabbitmqctl status
```
*Expected: Should show cluster and node status*

## Step 11: Check RabbitMQ cluster info
```bash
kubectl exec -it rabbitmq -n messaging -- rabbitmqctl cluster_status
```

## Step 12: List RabbitMQ users
```bash
kubectl exec -it rabbitmq -n messaging -- rabbitmqctl list_users
```
*Should show the admin user you created*

## Step 13: Get detailed pod information
```bash
kubectl describe pod rabbitmq -n messaging
```


## Clean up (if needed):
```bash
kubectl delete pod rabbitmq -n messaging
kubectl delete namespace messaging
```

